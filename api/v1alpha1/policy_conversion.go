/*
Copyright The Ratify Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	v1beta1 "github.com/deislabs/ratify/api/v1beta1"
	"github.com/sirupsen/logrus"
	apiconversion "k8s.io/apimachinery/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// ConvertFrom converts from the Hub version(v1beta1) to this version.
// nolint:revive
func (dst *Policy) ConvertFrom(srcRaw conversion.Hub) error {
	src := srcRaw.(*v1beta1.Policy)

	return Convert_v1beta1_Policy_To_v1alpha1_Policy(src, dst, nil)
}

// ConvertTo converts this version to the Hub version(v1beta1).
// nolint:revive
func (src *Policy) ConvertTo(dstRaw conversion.Hub) error {
	dst := dstRaw.(*v1beta1.Policy)

	return Convert_v1alpha1_Policy_To_v1beta1_Policy(src, dst, nil)
}

// Convert unversioned Policy to Policy of v1alpha1.
//
//nolint:revive // ignore linter for autogenerated code
func Convert_v1beta1_Policy_To_v1alpha1_Policy(in *v1beta1.Policy, out *Policy, s apiconversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1beta1_PolicySpec_To_v1alpha1_PolicySpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return Convert_v1beta1_PolicyStatus_To_v1alpha1_PolicyStatus(&in.Status, &out.Status, s)
}

// Overwrite generated conversion function.
//
//nolint:revive
func Convert_v1beta1_PolicySpec_To_v1alpha1_PolicySpec(in *v1beta1.PolicySpec, out *PolicySpec, s apiconversion.Scope) error {
	out.Parameters = in.Parameters
	return nil
}

// Overwrite generated conversion function.
//
//nolint:revive
func Convert_v1beta1_PolicyStatus_To_v1alpha1_PolicyStatus(in *v1beta1.PolicyStatus, out *PolicyStatus, s apiconversion.Scope) error {
	return autoConvert_v1beta1_PolicyStatus_To_v1alpha1_PolicyStatus(in, out, s)
}

// Convert Policy of v1alpha1 to v1beta1 Policy.
//
//nolint:revive
func Convert_v1alpha1_Policy_To_v1beta1_Policy(in *Policy, out *v1beta1.Policy, s apiconversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	// spec.type in unversioned is same as metadata.name in v1alpha1.
	out.Spec.Type = in.ObjectMeta.Name

	if err := Convert_v1alpha1_PolicySpec_To_v1beta1_PolicySpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}

	return Convert_v1alpha1_PolicyStatus_To_v1beta1_PolicyStatus(&in.Status, &out.Status, s)
}

// Overwrite generated conversion function.
//
//nolint:revive
func Convert_v1alpha1_PolicySpec_To_v1beta1_PolicySpec(in *PolicySpec, out *v1beta1.PolicySpec, s apiconversion.Scope) error {
	return autoConvert_v1alpha1_PolicySpec_To_v1beta1_PolicySpec(in, out, s)
}

// Overwrite generated conversion function.
//
//nolint:revive
func Convert_v1alpha1_PolicyStatus_To_v1beta1_PolicyStatus(in *PolicyStatus, out *v1beta1.PolicyStatus, s apiconversion.Scope) error {
	out.Error = "warning: converted from v1alpha1"
	logrus.Info("Policy Warning: converted from v1alpha1")
	return autoConvert_v1alpha1_PolicyStatus_To_v1beta1_PolicyStatus(in, out, s)
}
